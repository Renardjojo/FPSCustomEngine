{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"header": {
		"scope": "cpp, hpp",
		"prefix": "h",
		"body": [
			"//Project : Engine",
			"//Editing by Gavelle Anthony, Nisi Guillaume, Six Jonathan",
			"//Date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE - $CURRENT_HOUR h $CURRENT_MINUTE",
			"",			
			"#ifndef __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			"#define __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			"",
			"namespace $2",
			"{",
			"$0",
			"} /*namespace $2*/",
			"",
			"#endif // __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			""
		],
		"description": "header"
	},

	"class": {
		"scope": "cpp, hpp",
		"prefix": "cl",
		"body": [
			"class $1",
			"{",
			"\tprivate:",
			"",
			"\tprotected:",
			"",
			"\t#pragma region attribut",
			"\t#pragma endregion //!attribut",
			"",
			"\t#pragma region static attribut",
			"\t#pragma endregion //! static attribut",
			"",
			"\t#pragma region methods",
			"\t#pragma endregion //!methods",
			"",
			"\tpublic:",
			"",
			"\t#pragma region constructor/destructor",
			"",
			"\t$1 ()\t\t\t\t\t= default;",
            "\t$1 (const $1& other)\t\t\t= default;",
            "\t$1 ($1&& other)\t\t\t\t= default;",
			"\tvirtual ~$1 ()\t\t\t\t= default;",
			"\t$1& operator=($1 const& other)\t\t\t= default;",
			"\t$1& operator=($1 && other)\t\t\t= default;",
			"",
			"\t#pragma endregion //!constructor/destructor",
			"",
			"\t#pragma region methods",
			"\t#pragma endregion //!methods",
			"",
			"\t#pragma region accessor",
			"\t#pragma endregion //!accessor",
			"",
			"\t#pragma region mutator",
			"\t#pragma endregion //!mutator",
			"",
			"\t#pragma region operator",
			"\t#pragma endregion //!operator",
			"",
			"\t#pragma region convertor",
			"\t#pragma endregion //!convertor",
			"",
			"};"
		],
		"description": "create class"
	},

	"scripth": {
		"scope": "cpp, hpp",
		"prefix": "hscript",
		"body": [
			"//Project : Engine",
			"//Editing by Gavelle Anthony, Nisi Guillaume, Six Jonathan",
			"//Date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE - $CURRENT_HOUR h $CURRENT_MINUTE",
			"",			
			"#ifndef __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			"#define __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			"",
			"#include \"GE/Core/Component/ScriptComponent.hpp\"",
			"#include \"GE/Ressources/GameObject.hpp\"",
			"#include \"GE/Core/InputSystem/input.hpp\"",
			"#include \"GE/Core/Maths/vec.hpp\"",
			"#include \"GE/LowRenderer/camera.hpp\"",
			"#include \"GE/Physics/PhysicalObject.hpp\"",
			"#include \"GE/Physics/ColliderShape/Collider.hpp\"",
			"",
			"namespace Game",
			"{",
			"	class ${TM_FILENAME_BASE} : public Engine::Core::Component::ScriptComponent",
			"	{",
			"",
			"	private:",
			"",
			"	public:",
			"		${TM_FILENAME_BASE}(Engine::Ressources::GameObject &gameObject);",
			"		virtual ~${TM_FILENAME_BASE}() = default;",
			"",
			"		void start() override;",
			"		void update() override;",
			"		void fixedUpdate() override;",
			"",
			"		void onCollisionEnter(Engine::Physics::ColliderShape::HitInfo& hitInfo) override;",
			"",
			"		void save(xml_document<>& doc, xml_node<>* nodeParent);",
			"	};",
			"	",
			"} // namespace Game",
			"",
			"#endif // __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			""
		],
		"description": "scripth"
	},

	"scriptc": {
		"scope": "cpp",
		"prefix": "cscript",
		"body": [
			"//Project : Engine",
			"//Editing by Gavelle Anthony, Nisi Guillaume, Six Jonathan",
			"//Date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE - $CURRENT_HOUR h $CURRENT_MINUTE",
			"",	
			"#include <iostream>",
			"#include \"Game/${TM_FILENAME_BASE}.hpp\"",
			"#include \"GE/Core/InputSystem/input.hpp\"",
			"#include \"GE/Core/System/TimeSystem.hpp\"",
			"#include \"GE/Physics/PhysicalObject.hpp\"",
			"#include \"GE/Physics/PhysicSystem.hpp\"",
			"#include \"GE/Ressources/scene.hpp\"",
			"#include \"GE/Ressources/ressourcesManager.hpp\"",
			"",
			"using namespace Game;",
			"using namespace Engine::Physics;",
			"using namespace Engine::Physics::ColliderShape;",
			"using namespace Engine::Ressources;",
			"using namespace Engine::Core::Component;",
			"using namespace Engine::Core::InputSystem;",
			"using namespace Engine::Core::System;",
			"using namespace Engine::Core::Maths;",
			"using namespace Engine::Core::Maths::ShapeRelation;",
			"using namespace Engine::LowRenderer;",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(GameObject &_gameObject)",
			"	: ScriptComponent{_gameObject}",
			"{",
			"}",
			"",
			"void ${TM_FILENAME_BASE}::start()",
			"{",
			"}",
			"",
			"void ${TM_FILENAME_BASE}::update()",
			"{",
			"}",
			"",
			"void ${TM_FILENAME_BASE}::fixedUpdate()",
			"{",
			"}",
			"",
			"void ${TM_FILENAME_BASE}::onCollisionEnter(HitInfo& hitInfo)",
			"{",
			"}",
			"",
			"void ${TM_FILENAME_BASE}::save(xml_document<>& doc, xml_node<>* nodeParent)",
			"{",
			"	if (!nodeParent)",
			"		return;",
			"	xml_node<> *newNode = doc.allocate_node(node_element, \"COMPONENT\");",
			"",
			"	newNode->append_attribute(doc.allocate_attribute(\"type\", \"${TM_FILENAME_BASE}\"));",
			"",
			"	nodeParent->append_node(newNode);",
			"}",
			""
		],
		"description": "scriptc"
	},


	"Add include guard": {
		"prefix": "guard",
		"description": "Adds an ifndef include guard to a C header",
		"body": [
			"#ifndef __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			"#define __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			"",
			"$0",
			"",
			"#endif // __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
			""
		]
	}
}

